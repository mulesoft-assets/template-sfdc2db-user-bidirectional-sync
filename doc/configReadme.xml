<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and Database User Bidirectional Sync</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
I want to have my users synchronized between Salesforce and Database organizations.

## Template overview <a name="templateoverview"/>

To keep Salesforce synchronized with the database:

1. Ask Salesforce:
	> *Which changes have there been since the last time I checked with you?*

2. For each of the updates fetched in Step 1, ask Database:
	> *Does the update received from A should be applied?*

3. If the database answer for Step 2 is *Yes*, then *upsert* (creating or updating depending each case) to the database with the change.

4. Repeat Steps 1 - 3 the other way around using the database as the source and Salesforce as the target.

 Repeat *ad infinitum*:

5. Ask Salesforce:
	> *What changes have there been since Step 1?*

And so on...
  
The question for recent changes from a certain moment is nothing but a scheduler with a watermark defined.

		</section>
		<section id="considerations">
<![CDATA[
**Note:** This template illustrates the synchronization use case between Salesforce and a database, and requires a database instance to work.
The database comes packaged with a SQL script to create the database table that it uses. 
It is your responsibility to use the script to create the table in an available schema and change the configuration accordingly.
The SQL script file can be found in src/main/resources/User.sql

This template is customized for MySQL. To use it with different SQL implementation, some changes are necessary:

* Update the SQL script dialect to the desired one.
* Replace the MySQL driver library dependency to the desired one in the pom.xml file.
* Set the database properties in the `mule.*.properties` file.

Before running this template:

1. **Users cannot be deleted in Salesforce:** For now, the only thing to do regarding users removal is disabling and deactivating them, but this won't make the username available for new user.
2. **Each user needs to be associated to a Profile:** Salesforce's profiles are what define the permissions the user has for manipulating data and other users. Each Salesforce account has its own profiles. See the next section to define a map between Profile IDs (from the source account to the ones in the target account and the other way around).
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
**Application Configuration**

+ scheduler.frequency `10000`
+ scheduler.startDelay `100`
+ page.size `200`

**Database Connector Configuration**

+ db.host `localhost`
+ db.port `3306`
+ db.user `user-name1`
+ db.password `user-password1`
+ db.name `dbname1`
+ db.watermark.default.expression `YESTERDAY`
+ db.integration.user.id `mule@localhost`


### Salesforce Connector Configuration

+ sfdc.username `polly.hedra@mail.com`
+ sfdc.password `Noctiluca123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.watermark.default.expression `2018-11-04T11:00:00.000Z`  
+ sfdc.integration.user.id `005n0000000T3QkAAK`

	**Note:** To find the correct *sfdc.integration.user.id* value, refer to example project **Salesforce Data Retrieval** in Anypoint Exchange.

This property is an important one, as it configures what should be the starting point for the synchronization. 

+ from.sfdc.to.db.profilesMap `['00r80000001CEiGAAW': '00e80000110CDfGMAX','00e30000000ifQyAAI': '00q70000000fiQyEZI']`  
+ from.db.to.sfdc.profilesMap `['00r80000001CEiGAAW': '00e80000110CDfGMAX','00e30000000ifQyAAI': '00q70000000fiQyEZI']`  

The meaning of these properties is defined in the second consideration in the previous section.

]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The Anypoint Template calls to the API can be calculated using the formula:

***1 + X + X / 200***

Being ***X*** the number of Users to be synchronized on each run. 

The division by ***200*** is because, by default, users are gathered in groups of 200 for each Upsert API Call in the commit step. Also consider that these calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from origin instance, then 12 API calls are made (1 + 10 + 1).
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This file should contain every inbound and outbound endpoint of your integration app. It contains the application API.
In this template, this file contains three flows: 

The first **scheduler** flow contains a scheduler that periodically triggers the **querySalesforce** and **queryDatabase** flow based on the value of the syncState variable. The syncState variable is stored by using **SchedulerStatus** ObjectStore and updated before and after executing the batch job process.

The second **queryDatabase** flow one contains watermarking logic for querying the database for updated or created Users that meet the defined criteria in the query since the last polling. The last invocation timestamp is stored with the Objectstore component and updated after each database query.

The third **querySalesforce** flow contains watermarking logic for querying Salesforce for updated or created Users that meet the defined criteria in the query since the last polling. The last invocation timestamp is stored with the Objectstore component and updated after each Salesforce query.

]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
This file holds the functional aspect of the template (points 2. to 4. described in the [template overview](#templateoverview)). Its main component is a [*Batch job*][8], and it includes *steps* for both executing the synchronization from Salesforce to database, and the other way around.
]]>
		</section>
	</sections>
</configuration>
